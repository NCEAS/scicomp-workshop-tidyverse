---
title: "Join"
---

```{r, echo = F, message = F}
library(tidyverse); library(palmerpenguins)
```

## Combining data

<img src = "images/nceas_logo_square.png" align = "right" width = "15%" />

Now that we know how to manipulate a single dataframe, how do we manipulate multiple dataframes? If we have multiple sources of data and we want to combine them together into one dataframe or table, we can **join** them through any shared column(s)! Data you'll be joining can be called relational data, because it has some kind of relationship between them that youâ€™ll be acting upon. In the `tidyverse`, combining data that has a relationship is called "joining". Let's look at some of `dplyr`'s many `join` functions!

### Example: Left Join

For demonstration purposes, let's add a new column called `record_number` to our penguins data and call the new dataframe `penguins_left_dataframe`. As you can see below, each row is now numbered from 1 to the length of the dataframe. 

```{r}
# Add a column called `record_number` to our penguins dataset
penguins_left_dataframe <- penguins %>%
    dplyr::mutate(record_number = 1:n())

knitr::kable(head(penguins_left_dataframe))
```

The `palmerpenguins` package also has a "penguins_raw" dataset with additional, raw information on the same penguins, such as their sampling region, unique identifier, and the date when their nest was observed. Again, for demonstration purposes, let's add a new column called `record_number` and call this new dataframe `penguins_right_dataframe`.  

```{r}
# Add a column called `record_number` to our raw penguins dataset
penguins_right_dataframe <- penguins_raw %>%
  dplyr::mutate(record_number = 1:n()) %>%
  dplyr::select(record_number, Region, `Individual ID`, `Date Egg`)

knitr::kable(head(penguins_right_dataframe))
```

Now that we have two dataframes both with a shared column called `record_number`, we can `left_join` them together to combine information! 

In a `left_join`, we join matching rows from the right dataframe to the left dataframe. 

<img src="images/join-left.png" align="center" width="50%" />

We can specify the column that we want to join on with `by = ...`. If don't provide this argument, then `dplyr` will automatically join on any matching columns between the left and right dataframes. In our case, we want to `left_join` by `record_number`.

```{r}
# Left-join the two dataframes together on the shared column!
penguins_left_joined <- dplyr::left_join(penguins_left_dataframe, penguins_right_dataframe,
                                         by = "record_number")

knitr::kable(head(penguins_left_joined))
```

What we have in the end is `penguins_left_joined`, a dataframe with information from both `penguins_left_dataframe` and `penguins_right_dataframe`! All the rows in `penguins_left_dataframe` are kept. Below are some other types of `join` functions. Use the ones that suit your needs for the various situations you may run into.  

### Example: Right Join

In a `right_join`, we join matching rows from the left dataframe to the right dataframe. 

<img src="images/join-right.png" align="center" width="50%" />

### Example: Inner Join

In an `inner_join`, we keep only the rows in both dataframes. 

<img src="images/join-inner.png" align="center" width="50%" />

### Example: Full Join

In a `full_join`, we keep all values and all rows. 

<img src="images/join-full.png" align="center" width="50%" />

### Example: Anti Join

In an `anti_join`, we return rows of the left dataframe that do not have a match in the right dataframe. This can be used to see what will **not** be included in a join. 

<img src="images/join-anti.png" align="center" width="50%" />

### Additional Notes

- If we want to join by more than one matching column, we can specify multiple columns with a vector like so: `by = c("column1", "column2")`.

- We can also use a named vector, `by = c("column_a" = "COLUMN_A")` to match on columns that have different names in each dataframe. 

