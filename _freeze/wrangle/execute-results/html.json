{
  "hash": "050508eb32acc6fd6f78ef2bb71e5a75",
  "result": {
    "markdown": "---\ntitle: \"Wrangle\"\n---\n\n::: {.cell}\n\n:::\n\n\n## What are Tidy Data?\n\n<img src=\"images/nceas_logo_square.png\" align=\"right\" width=\"15%\"/>\n\nWhat are some common things you like to do with your data? Maybe remove rows or columns, do calculations and add new columns? This is called data wrangling. The data we get to work with are rarely, if ever, in the format we need to do our analyses. `dplyr` and `tidyr` are two R packages from the `tidyverse` that provide a fairly complete and extremely powerful set of functions for us to do virtually all needed wrangling quickly. Here we introduce some commonly used functions from these two packages.\n\n## Penguins Example Data\n\nThe data we'll be using for this workshop comes from the `palmerpenguins` package, maintained by [Allison Horst](ahorst@ucsb.edu). The \"penguins\" dataset from this package contains size measurements for adult foraging penguins near Palmer Station, Antarctica. Data were collected and made available by Dr. Kristen Gorman and the Palmer Station Long Term Ecological Research (LTER) Program. Let's take a look at it!\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\nThe \"penguins\" dataset has 344 rows and 8 columns.\n\nThe columns are as follows:\n\n`species`: a factor denoting penguin species (Adélie, Chinstrap and Gentoo)\n\n`island`: a factor denoting island in Palmer Archipelago, Antarctica (Biscoe, Dream or Torgersen)\n\n`bill_length_mm`: a number denoting bill length (millimeters)\n\n`bill_depth_mm`: a number denoting bill depth (millimeters)\n\n`flipper_length_mm`: an integer denoting flipper length (millimeters)\n\n`body_mass_g`: an integer denoting body mass (grams)\n\n`sex`: a factor denoting penguin sex (female, male)\n\n`year`: an integer denoting the study year (2007, 2008, or 2009)\n\nThis dataset is an example of **tidy data**, which means that each **variable** is in its own **column** and each **observation** is in its own **row**. Generally speaking, functions from packages in the `tidyverse` expect tidy data though they can be used in some cases to help get data into tidy format! Regardless, the penguins dataset is what we'll use for all examples in this workshop so be sure that you install the `palmerpenguins` R package. The examples on this page were adapted from [Allison Horst's `dplyr` tutorial](https://allisonhorst.shinyapps.io/dplyr-learnr/#section-welcome)!\n\n## Selecting columns\n\nTo start off, how do we do a fundamental action like selecting the columns we want? `dplyr`'s `select` function provides us with a straightforward way to do just that. We only need to provide the column names!\n\n<img src=\"images/wrangle-select.png\" align=\"center\" width=\"50%\"/>\n\n### Example: Select\n\nFor example, to select only the `species`, `island`, and `body_mass_g` columns, we can use the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Provide the name of the data and then the columns that you want!\npenguins_selected <- dplyr::select(.data = penguins, species, island, body_mass_g)\n\n# Look at the product\nknitr::kable(head(penguins_selected))\n```\n\n::: {.cell-output-display}\n|species |island    | body_mass_g|\n|:-------|:---------|-----------:|\n|Adelie  |Torgersen |        3750|\n|Adelie  |Torgersen |        3800|\n|Adelie  |Torgersen |        3250|\n|Adelie  |Torgersen |          NA|\n|Adelie  |Torgersen |        3450|\n|Adelie  |Torgersen |        3650|\n:::\n:::\n\n\nIf we want to remove specific columns, we can use the `-` operator.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Put a \"-\" in front of each column you would like to remove from your dataframe\npenguins_selected <- dplyr::select(.data = penguins, -flipper_length_mm, -sex)\n\n# Look at the product\nknitr::kable(head(penguins_selected))\n```\n\n::: {.cell-output-display}\n|species |island    | bill_length_mm| bill_depth_mm| body_mass_g| year|\n|:-------|:---------|--------------:|-------------:|-----------:|----:|\n|Adelie  |Torgersen |           39.1|          18.7|        3750| 2007|\n|Adelie  |Torgersen |           39.5|          17.4|        3800| 2007|\n|Adelie  |Torgersen |           40.3|          18.0|        3250| 2007|\n|Adelie  |Torgersen |             NA|            NA|          NA| 2007|\n|Adelie  |Torgersen |           36.7|          19.3|        3450| 2007|\n|Adelie  |Torgersen |           39.3|          20.6|        3650| 2007|\n:::\n:::\n\n\n### Example: Selecting columns with helper functions\n\nIf we want to select the columns that contain length measurements, we can manually type `bill_length_mm` and `flipper_length_mm`, but there's actually an easier way using the `contains` function, also from the `dplyr` package. Enter a string that matches what you're looking for among the column names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter a matching string inside of a `select` call\npenguins_selected <- dplyr::select(.data = penguins, dplyr::contains(\"length\"))\n\n# Look at the product\nknitr::kable(head(penguins_selected))\n```\n\n::: {.cell-output-display}\n| bill_length_mm| flipper_length_mm|\n|--------------:|-----------------:|\n|           39.1|               181|\n|           39.5|               186|\n|           40.3|               195|\n|             NA|                NA|\n|           36.7|               193|\n|           39.3|               190|\n:::\n:::\n\n\nIn addition to `contains`, `starts_with` and `ends_with` are also two other helper functions--also from the `dplyr` package--that allow you to select columns that starts with or ends with a certain string! For example, if we wanted all the columns that end in \"mm\"...\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter a string that matches the end of the column names\npenguins_selected <- dplyr::select(.data = penguins, dplyr::ends_with(\"_mm\"))\n\n# Look at the product\nknitr::kable(head(penguins_selected))\n```\n\n::: {.cell-output-display}\n| bill_length_mm| bill_depth_mm| flipper_length_mm|\n|--------------:|-------------:|-----------------:|\n|           39.1|          18.7|               181|\n|           39.5|          17.4|               186|\n|           40.3|          18.0|               195|\n|             NA|            NA|                NA|\n|           36.7|          19.3|               193|\n|           39.3|          20.6|               190|\n:::\n:::\n\n\nNow what if we wanted all the columns from the first column `species` to the sixth column `body_mass_g`? We can use a colon, `:`, between the first (leftmost) and last (rightmost) columns in the range that we want to include.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use a colon to indicate a range of columns you want to select\npenguins_selected <- dplyr::select(.data = penguins, species:body_mass_g)\n\n# Look at the product\nknitr::kable(head(penguins_selected))\n```\n\n::: {.cell-output-display}\n|species |island    | bill_length_mm| bill_depth_mm| flipper_length_mm| body_mass_g|\n|:-------|:---------|--------------:|-------------:|-----------------:|-----------:|\n|Adelie  |Torgersen |           39.1|          18.7|               181|        3750|\n|Adelie  |Torgersen |           39.5|          17.4|               186|        3800|\n|Adelie  |Torgersen |           40.3|          18.0|               195|        3250|\n|Adelie  |Torgersen |             NA|            NA|                NA|          NA|\n|Adelie  |Torgersen |           36.7|          19.3|               193|        3450|\n|Adelie  |Torgersen |           39.3|          20.6|               190|        3650|\n:::\n:::\n\n\nThese helper functions make it convenient to select multiple columns at once, which is especially useful if you have a big dataframe and don't want to exhaustively list every column name.\n\n## Subsetting rows\n\nInstead of selecting certain columns, how can we get a subset of rows that meet certain conditions? For example, in the diagram below, how can we filter for rows that contain a diamond shape? We can use `dplyr`'s handy `filter` function along with logical and boolean operators!\n\n<img src=\"images/wrangle-filter.png\" align=\"center\" width=\"25%\"/>\n\nFor reference, here are the operators we can use to specify our conditions with `filter`.\n\n<img src=\"images/wrangle-operators.png\" align=\"center\" width=\"90%\"/>\n\n### Example: Equality operator\n\nTo get familiar with these operators, let's see some examples. To make a subset of our data that only contains information on Chinstrap penguins, here is what we would do:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get all the rows where the species is \"Chinstrap\" \npenguins_filtered <- dplyr::filter(.data = penguins, species == \"Chinstrap\")\n\nknitr::kable(head(penguins_filtered))\n```\n\n::: {.cell-output-display}\n|species   |island | bill_length_mm| bill_depth_mm| flipper_length_mm| body_mass_g|sex    | year|\n|:---------|:------|--------------:|-------------:|-----------------:|-----------:|:------|----:|\n|Chinstrap |Dream  |           46.5|          17.9|               192|        3500|female | 2007|\n|Chinstrap |Dream  |           50.0|          19.5|               196|        3900|male   | 2007|\n|Chinstrap |Dream  |           51.3|          19.2|               193|        3650|male   | 2007|\n|Chinstrap |Dream  |           45.4|          18.7|               188|        3525|female | 2007|\n|Chinstrap |Dream  |           52.7|          19.8|               197|        3725|male   | 2007|\n|Chinstrap |Dream  |           45.2|          17.8|               198|        3950|female | 2007|\n:::\n:::\n\n\nNote that we need to write our match as a string, encased in quotation marks.\n\n### Example: \"Or\" statement\n\nWhat if we wanted to get all the rows where the penguin species is \"Chinstrap\" **or** \"Gentoo\"? In other words, we want all the rows where either condition is true. There are two options to do this. The first option is to use the \"or\" operator, `|`, between the conditions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First option\n# Get all the rows where the species is \"Chinstrap\" or \"Gentoo\"\npenguins_filtered <- dplyr::filter(.data = penguins,\n                             species == \"Chinstrap\" | species == \"Gentoo\")\n\nknitr::kable(head(penguins_filtered))\n```\n\n::: {.cell-output-display}\n|species |island | bill_length_mm| bill_depth_mm| flipper_length_mm| body_mass_g|sex    | year|\n|:-------|:------|--------------:|-------------:|-----------------:|-----------:|:------|----:|\n|Gentoo  |Biscoe |           46.1|          13.2|               211|        4500|female | 2007|\n|Gentoo  |Biscoe |           50.0|          16.3|               230|        5700|male   | 2007|\n|Gentoo  |Biscoe |           48.7|          14.1|               210|        4450|female | 2007|\n|Gentoo  |Biscoe |           50.0|          15.2|               218|        5700|male   | 2007|\n|Gentoo  |Biscoe |           47.6|          14.5|               215|        5400|male   | 2007|\n|Gentoo  |Biscoe |           46.5|          13.5|               210|        4550|female | 2007|\n:::\n:::\n\n\nThe second option is to use the `%in%` operator, followed by a vector of values to look for a match in. If you want to look for multiple matches, this option may be better since you only need to add to your vector of matches.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Second option\n# Get all the rows where the species is \"Chinstrap\" or \"Gentoo\"\npenguins_filtered <- dplyr::filter(.data = penguins,\n                             species %in% c(\"Chinstrap\", \"Gentoo\"))\n\nknitr::kable(head(penguins_filtered))\n```\n\n::: {.cell-output-display}\n|species |island | bill_length_mm| bill_depth_mm| flipper_length_mm| body_mass_g|sex    | year|\n|:-------|:------|--------------:|-------------:|-----------------:|-----------:|:------|----:|\n|Gentoo  |Biscoe |           46.1|          13.2|               211|        4500|female | 2007|\n|Gentoo  |Biscoe |           50.0|          16.3|               230|        5700|male   | 2007|\n|Gentoo  |Biscoe |           48.7|          14.1|               210|        4450|female | 2007|\n|Gentoo  |Biscoe |           50.0|          15.2|               218|        5700|male   | 2007|\n|Gentoo  |Biscoe |           47.6|          14.5|               215|        5400|male   | 2007|\n|Gentoo  |Biscoe |           46.5|          13.5|               210|        4550|female | 2007|\n:::\n:::\n\n\n### Example: \"And\" statement\n\nWe can also keep rows where both conditions are met by using the \"and\" operator, `&`. To keep only the rows where the species is \"Adelie\" **and** the island is \"Dream\", here is one option we can do:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First option\n# Get all the rows where the species is \"Adelie\" and the island is \"Dream\"\npenguins_filtered <- dplyr::filter(.data = penguins,\n                             species == \"Adelie\" & island == \"Dream\")\n\nknitr::kable(head(penguins_filtered))\n```\n\n::: {.cell-output-display}\n|species |island | bill_length_mm| bill_depth_mm| flipper_length_mm| body_mass_g|sex    | year|\n|:-------|:------|--------------:|-------------:|-----------------:|-----------:|:------|----:|\n|Adelie  |Dream  |           39.5|          16.7|               178|        3250|female | 2007|\n|Adelie  |Dream  |           37.2|          18.1|               178|        3900|male   | 2007|\n|Adelie  |Dream  |           39.5|          17.8|               188|        3300|female | 2007|\n|Adelie  |Dream  |           40.9|          18.9|               184|        3900|male   | 2007|\n|Adelie  |Dream  |           36.4|          17.0|               195|        3325|female | 2007|\n|Adelie  |Dream  |           39.2|          21.1|               196|        4150|male   | 2007|\n:::\n:::\n\n\nOr you can also just use a comma instead!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Second option\n# Get all the rows where the species is \"Adelie\" and the island is \"Dream\"\npenguins_filtered <- dplyr::filter(.data = penguins,\n                             species == \"Adelie\", island == \"Dream\")\n\nknitr::kable(head(penguins_filtered))\n```\n\n::: {.cell-output-display}\n|species |island | bill_length_mm| bill_depth_mm| flipper_length_mm| body_mass_g|sex    | year|\n|:-------|:------|--------------:|-------------:|-----------------:|-----------:|:------|----:|\n|Adelie  |Dream  |           39.5|          16.7|               178|        3250|female | 2007|\n|Adelie  |Dream  |           37.2|          18.1|               178|        3900|male   | 2007|\n|Adelie  |Dream  |           39.5|          17.8|               188|        3300|female | 2007|\n|Adelie  |Dream  |           40.9|          18.9|               184|        3900|male   | 2007|\n|Adelie  |Dream  |           36.4|          17.0|               195|        3325|female | 2007|\n|Adelie  |Dream  |           39.2|          21.1|               196|        4150|male   | 2007|\n:::\n:::\n\n\n### Example: Other logical operators\n\nThe other standard logical operators (`<`, `>`, `<=`, `>=`) also work pretty intuitively with our conditions. Note that when we filter for numeric values, we do not need the quotation marks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get all the rows where the bill_length_mm is greater than 50\npenguins_filtered <- dplyr::filter(.data = penguins, bill_length_mm > 50)\n\nknitr::kable(head(penguins_filtered))\n```\n\n::: {.cell-output-display}\n|species |island | bill_length_mm| bill_depth_mm| flipper_length_mm| body_mass_g|sex  | year|\n|:-------|:------|--------------:|-------------:|-----------------:|-----------:|:----|----:|\n|Gentoo  |Biscoe |           50.2|          14.3|               218|        5700|male | 2007|\n|Gentoo  |Biscoe |           59.6|          17.0|               230|        6050|male | 2007|\n|Gentoo  |Biscoe |           50.5|          15.9|               222|        5550|male | 2008|\n|Gentoo  |Biscoe |           50.5|          15.9|               225|        5400|male | 2008|\n|Gentoo  |Biscoe |           50.1|          15.0|               225|        5000|male | 2008|\n|Gentoo  |Biscoe |           50.4|          15.3|               224|        5550|male | 2008|\n:::\n:::\n\n\n### Example: Excluding rows\n\nSometimes it's faster to subset the rows that **do not** meet a condition, rather than listing everything that we do want to keep. This is where the `!=` operator becomes useful. It basically means \"does not match\". More generally, the exclamation mark indicates negation in the operator.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get all the rows where the species is NOT \"Chinstrap\"\npenguins_filtered <- dplyr::filter(.data = penguins, species != \"Chinstrap\")\n\nknitr::kable(head(penguins_filtered))\n```\n\n::: {.cell-output-display}\n|species |island    | bill_length_mm| bill_depth_mm| flipper_length_mm| body_mass_g|sex    | year|\n|:-------|:---------|--------------:|-------------:|-----------------:|-----------:|:------|----:|\n|Adelie  |Torgersen |           39.1|          18.7|               181|        3750|male   | 2007|\n|Adelie  |Torgersen |           39.5|          17.4|               186|        3800|female | 2007|\n|Adelie  |Torgersen |           40.3|          18.0|               195|        3250|female | 2007|\n|Adelie  |Torgersen |             NA|            NA|                NA|          NA|NA     | 2007|\n|Adelie  |Torgersen |           36.7|          19.3|               193|        3450|female | 2007|\n|Adelie  |Torgersen |           39.3|          20.6|               190|        3650|male   | 2007|\n:::\n:::\n\n\n### Challenge: Subsetting\n\nAs a practice exercise, try to get all the rows that **do not** have any `NA` values in the `sex` column.\n\n## Making and modifying columns\n\nBesides selecting columns and subsetting rows, we may want to create new columns in our data. For instance, in the diagram below, we have a dataframe that only contains column A, and then we add new columns B and C. We can use `dplyr`'s `mutate` function to add a new column, while keeping the existing columns.\n\n<img src=\"images/wrangle-mutate.png\" align=\"center\" width=\"50%\"/>\n\n### Example: Mutate\n\nThe syntax to add a new column to your dataframe is as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# General mutate syntax\ndplyr::mutate(.data = your_data, new_column_name = what_it_contains)\n```\n:::\n\n\nIf we wanted to add a new column that has the penguin's body mass in kilograms, we can do some simple arithmetic on the `body_mass_g` column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a new column with the penguins' body mass in kilograms\npenguins_mutated <- dplyr::mutate(.data = penguins, body_mass_kg = body_mass_g / 1000)\n\nknitr::kable(head(penguins_mutated))\n```\n\n::: {.cell-output-display}\n|species |island    | bill_length_mm| bill_depth_mm| flipper_length_mm| body_mass_g|sex    | year| body_mass_kg|\n|:-------|:---------|--------------:|-------------:|-----------------:|-----------:|:------|----:|------------:|\n|Adelie  |Torgersen |           39.1|          18.7|               181|        3750|male   | 2007|         3.75|\n|Adelie  |Torgersen |           39.5|          17.4|               186|        3800|female | 2007|         3.80|\n|Adelie  |Torgersen |           40.3|          18.0|               195|        3250|female | 2007|         3.25|\n|Adelie  |Torgersen |             NA|            NA|                NA|          NA|NA     | 2007|           NA|\n|Adelie  |Torgersen |           36.7|          19.3|               193|        3450|female | 2007|         3.45|\n|Adelie  |Torgersen |           39.3|          20.6|               190|        3650|male   | 2007|         3.65|\n:::\n:::\n\n\nAdditionally, `mutate` can be used to overwrite an existing column. If we give the new column the same name as an existing column, the existing column will be **replaced**. As you can see, `island` is currently a factor. To change its class to a character, we would need to overwrite the whole column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# the `island` column is currently a factor\nclass(penguins$island)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"factor\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Modify the existing island column\npenguins_mutated <- dplyr::mutate(.data = penguins, island = as.character(island))\n\n# the `island` column is now a character!\nclass(penguins_mutated$island)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\nNow `island` is a character column!\n\n### Example: Case When\n\n`dplyr`'s `case_when` is a really powerful tool that allows you to add a new column containing values dependent on your condition(s)! It can be thought of as a multi-case if-else statement. The general syntax for leveraging `case_when` with `mutate` looks like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# General mutate with case_when syntax\ndplyr::mutate(.data = your_data, new_column_name = dplyr::case_when(\n  condition1 ~ value_for_condition1,\n  condition2 ~ value_for_condition2,\n  condition3 ~ value_for_condition3,\n  ...\n))\n```\n:::\n\n\nSuppose we want to add a new column called `flipper_rank` that contains:\n\n-   1 if `flipper_length_mm` is \\< 200 mm\n-   2 if `flipper_length_mm` is \\>= 200 mm\n-   0 is `flipper_length_mm` is anything else (e.g. `NA`)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter your conditions on the left side and the values on the right side of the tilde\npenguins_mutated <- dplyr::mutate(.data = penguins, flipper_rank = dplyr::case_when(\n  flipper_length_mm < 200 ~ 1,\n  flipper_length_mm >= 200 ~ 2,\n  TRUE ~ 0 # 0 for anything else\n  ))\n\nknitr::kable(head(penguins_mutated))\n```\n\n::: {.cell-output-display}\n|species |island    | bill_length_mm| bill_depth_mm| flipper_length_mm| body_mass_g|sex    | year| flipper_rank|\n|:-------|:---------|--------------:|-------------:|-----------------:|-----------:|:------|----:|------------:|\n|Adelie  |Torgersen |           39.1|          18.7|               181|        3750|male   | 2007|            1|\n|Adelie  |Torgersen |           39.5|          17.4|               186|        3800|female | 2007|            1|\n|Adelie  |Torgersen |           40.3|          18.0|               195|        3250|female | 2007|            1|\n|Adelie  |Torgersen |             NA|            NA|                NA|          NA|NA     | 2007|            0|\n|Adelie  |Torgersen |           36.7|          19.3|               193|        3450|female | 2007|            1|\n|Adelie  |Torgersen |           39.3|          20.6|               190|        3650|male   | 2007|            1|\n:::\n:::\n\n\n### Challenge: Case When\n\nTry to see if you can add a new column called `size_bin` that contains:\n\n-   \"large\" if body mass is greater than 4500 grams\n-   \"medium\" if body mass is greater than 3000 grams, and less than or equal to 4500 grams\n-   \"small\" if body mass is less than or equal to 3000 grams\n\n## Splitting and uniting cells\n\nAnother common task in data wrangling involves splitting or combining cells into individual values. To demonstrate, let's first make a new column that contains the full scientific names for these penguins using `case_when`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter your conditions on the left side and the values on the right side of the tilde\npenguins_v1 <- dplyr::mutate(.data = penguins, scientific_name = dplyr::case_when(\n  species == \"Adelie\" ~ \"Pygoscelis adeliae\",\n  species == \"Chinstrap\" ~ \"Pygoscelis antarcticus\",\n  species == \"Gentoo\" ~ \"Pygoscelis papua\"\n  ))\n\nknitr::kable(head(penguins_v1))\n```\n\n::: {.cell-output-display}\n|species |island    | bill_length_mm| bill_depth_mm| flipper_length_mm| body_mass_g|sex    | year|scientific_name    |\n|:-------|:---------|--------------:|-------------:|-----------------:|-----------:|:------|----:|:------------------|\n|Adelie  |Torgersen |           39.1|          18.7|               181|        3750|male   | 2007|Pygoscelis adeliae |\n|Adelie  |Torgersen |           39.5|          17.4|               186|        3800|female | 2007|Pygoscelis adeliae |\n|Adelie  |Torgersen |           40.3|          18.0|               195|        3250|female | 2007|Pygoscelis adeliae |\n|Adelie  |Torgersen |             NA|            NA|                NA|          NA|NA     | 2007|Pygoscelis adeliae |\n|Adelie  |Torgersen |           36.7|          19.3|               193|        3450|female | 2007|Pygoscelis adeliae |\n|Adelie  |Torgersen |           39.3|          20.6|               190|        3650|male   | 2007|Pygoscelis adeliae |\n:::\n:::\n\n\n### Example: Separate\n\nNow that we have our new column, suppose we want to split it so that `scientific_name` becomes two columns instead: `genus` and `epithet`. We will need to utilize `tidyr`'s `separate` function by providing the type of separator and the new column names!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Indicate the column you want to split, the separator, and the new column names!\npenguins_separated <- tidyr::separate(data = penguins_v1,\n                               col = scientific_name,\n                               sep = \" \",\n                               into = c(\"genus\", \"epithet\"))\n\nknitr::kable(head(penguins_separated))\n```\n\n::: {.cell-output-display}\n|species |island    | bill_length_mm| bill_depth_mm| flipper_length_mm| body_mass_g|sex    | year|genus      |epithet |\n|:-------|:---------|--------------:|-------------:|-----------------:|-----------:|:------|----:|:----------|:-------|\n|Adelie  |Torgersen |           39.1|          18.7|               181|        3750|male   | 2007|Pygoscelis |adeliae |\n|Adelie  |Torgersen |           39.5|          17.4|               186|        3800|female | 2007|Pygoscelis |adeliae |\n|Adelie  |Torgersen |           40.3|          18.0|               195|        3250|female | 2007|Pygoscelis |adeliae |\n|Adelie  |Torgersen |             NA|            NA|                NA|          NA|NA     | 2007|Pygoscelis |adeliae |\n|Adelie  |Torgersen |           36.7|          19.3|               193|        3450|female | 2007|Pygoscelis |adeliae |\n|Adelie  |Torgersen |           39.3|          20.6|               190|        3650|male   | 2007|Pygoscelis |adeliae |\n:::\n:::\n\n\n### Example: Unite\n\nTo do the opposite and unite the `genus` and `epithet` columns back together into `scientific_name`, we can use `tidyr`'s `unite` function! Just provide the current columns that you want to collapse, the new column name, and the type of separator!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Indicate the columns you want to unite, the new column name, and the separator!\npenguins_united <- tidyr::unite(data = penguins_separated,\n                             genus, epithet,\n                             col = \"scientific_name\",\n                             sep = \" \")\n\nknitr::kable(head(penguins_united))\n```\n\n::: {.cell-output-display}\n|species |island    | bill_length_mm| bill_depth_mm| flipper_length_mm| body_mass_g|sex    | year|scientific_name    |\n|:-------|:---------|--------------:|-------------:|-----------------:|-----------:|:------|----:|:------------------|\n|Adelie  |Torgersen |           39.1|          18.7|               181|        3750|male   | 2007|Pygoscelis adeliae |\n|Adelie  |Torgersen |           39.5|          17.4|               186|        3800|female | 2007|Pygoscelis adeliae |\n|Adelie  |Torgersen |           40.3|          18.0|               195|        3250|female | 2007|Pygoscelis adeliae |\n|Adelie  |Torgersen |             NA|            NA|                NA|          NA|NA     | 2007|Pygoscelis adeliae |\n|Adelie  |Torgersen |           36.7|          19.3|               193|        3450|female | 2007|Pygoscelis adeliae |\n|Adelie  |Torgersen |           39.3|          20.6|               190|        3650|male   | 2007|Pygoscelis adeliae |\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}