{
  "hash": "fe04c3d74a567741242af17e285acd57",
  "result": {
    "markdown": "---\ntitle: \"Join\"\n---\n\n::: {.cell}\n\n:::\n\n\n## Combining data\n\n<img src = \"images/nceas_logo_square.png\" align = \"right\" width = \"15%\" />\n\nNow that we know how to manipulate a single dataframe, how do we manipulate multiple dataframes? If we have multiple sources of data and we want to combine them together into one dataframe or table, we can **join** them through any shared column(s)! Data you'll be joining can be called relational data, because it has some kind of relationship between them that youâ€™ll be acting upon. In the `tidyverse`, combining data that has a relationship is called \"joining\". Let's look at some of `dplyr`'s many `join` functions!\n\n### Example: Left Join\n\nFor demonstration purposes, let's add a new column called `record_number` to our penguins data and call the new dataframe `penguins_left_dataframe`. As you can see below, each row is now numbered from 1 to the length of the dataframe. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add a column called `record_number` to our penguins dataset\npenguins_left_dataframe <- penguins %>%\n    dplyr::mutate(record_number = 1:n())\n\nknitr::kable(head(penguins_left_dataframe))\n```\n\n::: {.cell-output-display}\n|species |island    | bill_length_mm| bill_depth_mm| flipper_length_mm| body_mass_g|sex    | year| record_number|\n|:-------|:---------|--------------:|-------------:|-----------------:|-----------:|:------|----:|-------------:|\n|Adelie  |Torgersen |           39.1|          18.7|               181|        3750|male   | 2007|             1|\n|Adelie  |Torgersen |           39.5|          17.4|               186|        3800|female | 2007|             2|\n|Adelie  |Torgersen |           40.3|          18.0|               195|        3250|female | 2007|             3|\n|Adelie  |Torgersen |             NA|            NA|                NA|          NA|NA     | 2007|             4|\n|Adelie  |Torgersen |           36.7|          19.3|               193|        3450|female | 2007|             5|\n|Adelie  |Torgersen |           39.3|          20.6|               190|        3650|male   | 2007|             6|\n:::\n:::\n\n\nThe `palmerpenguins` package also has a \"penguins_raw\" dataset with additional, raw information on the same penguins, such as their sampling region, unique identifier, and the date when their nest was observed. Again, for demonstration purposes, let's add a new column called `record_number` and call this new dataframe `penguins_right_dataframe`.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add a column called `record_number` to our raw penguins dataset\npenguins_right_dataframe <- penguins_raw %>%\n  dplyr::mutate(record_number = 1:n()) %>%\n  dplyr::select(record_number, Region, `Individual ID`, `Date Egg`)\n\nknitr::kable(head(penguins_right_dataframe))\n```\n\n::: {.cell-output-display}\n| record_number|Region |Individual ID |Date Egg   |\n|-------------:|:------|:-------------|:----------|\n|             1|Anvers |N1A1          |2007-11-11 |\n|             2|Anvers |N1A2          |2007-11-11 |\n|             3|Anvers |N2A1          |2007-11-16 |\n|             4|Anvers |N2A2          |2007-11-16 |\n|             5|Anvers |N3A1          |2007-11-16 |\n|             6|Anvers |N3A2          |2007-11-16 |\n:::\n:::\n\n\nNow that we have two dataframes both with a shared column called `record_number`, we can `left_join` them together to combine information! \n\nIn a `left_join`, we join matching rows from the right dataframe to the left dataframe. \n\n<img src=\"images/join-left.png\" align=\"center\" width=\"50%\" />\n\nWe can specify the column that we want to join on with `by = ...`. If don't provide this argument, then `dplyr` will automatically join on any matching columns between the left and right dataframes. In our case, we want to `left_join` by `record_number`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Left-join the two dataframes together on the shared column!\npenguins_left_joined <- dplyr::left_join(penguins_left_dataframe, penguins_right_dataframe,\n                                         by = \"record_number\")\n\nknitr::kable(head(penguins_left_joined))\n```\n\n::: {.cell-output-display}\n|species |island    | bill_length_mm| bill_depth_mm| flipper_length_mm| body_mass_g|sex    | year| record_number|Region |Individual ID |Date Egg   |\n|:-------|:---------|--------------:|-------------:|-----------------:|-----------:|:------|----:|-------------:|:------|:-------------|:----------|\n|Adelie  |Torgersen |           39.1|          18.7|               181|        3750|male   | 2007|             1|Anvers |N1A1          |2007-11-11 |\n|Adelie  |Torgersen |           39.5|          17.4|               186|        3800|female | 2007|             2|Anvers |N1A2          |2007-11-11 |\n|Adelie  |Torgersen |           40.3|          18.0|               195|        3250|female | 2007|             3|Anvers |N2A1          |2007-11-16 |\n|Adelie  |Torgersen |             NA|            NA|                NA|          NA|NA     | 2007|             4|Anvers |N2A2          |2007-11-16 |\n|Adelie  |Torgersen |           36.7|          19.3|               193|        3450|female | 2007|             5|Anvers |N3A1          |2007-11-16 |\n|Adelie  |Torgersen |           39.3|          20.6|               190|        3650|male   | 2007|             6|Anvers |N3A2          |2007-11-16 |\n:::\n:::\n\n\nWhat we have in the end is `penguins_left_joined`, a dataframe with information from both `penguins_left_dataframe` and `penguins_right_dataframe`! All the rows in `penguins_left_dataframe` are kept. Below are some other types of `join` functions. Use the ones that suit your needs for the various situations you may run into.  \n\n### Example: Right Join\n\nIn a `right_join`, we join matching rows from the left dataframe to the right dataframe. \n\n<img src=\"images/join-right.png\" align=\"center\" width=\"50%\" />\n\n### Example: Inner Join\n\nIn an `inner_join`, we keep only the rows in both dataframes. \n\n<img src=\"images/join-inner.png\" align=\"center\" width=\"50%\" />\n\n### Example: Full Join\n\nIn a `full_join`, we keep all values and all rows. \n\n<img src=\"images/join-full.png\" align=\"center\" width=\"50%\" />\n\n### Example: Anti Join\n\nIn an `anti_join`, we return rows of the left dataframe that do not have a match in the right dataframe. This can be used to see what will **not** be included in a join. \n\n<img src=\"images/join-anti.png\" align=\"center\" width=\"50%\" />\n\n### Additional Notes\n\n- If we want to join by more than one matching column, we can specify multiple columns with a vector like so: `by = c(\"column1\", \"column2\")`.\n\n- We can also use a named vector, `by = c(\"column_a\" = \"COLUMN_A\")` to match on columns that have different names in each dataframe. \n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}